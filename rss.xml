<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[andreveiga.dev]]></title><description><![CDATA[André Veiga's personal dev-related blog]]></description><link>https://www.andreveiga.dev</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 16 Jan 2022 19:29:09 GMT</lastBuildDate><item><title><![CDATA[Installing K3s and Knative on ARM]]></title><description><![CDATA[Installation This past week I wanted to try out Knative, a “Kubernetes-based platform to deploy and manage modern serverless workloads”. In…]]></description><link>https://www.andreveiga.dev/first-post/</link><guid isPermaLink="false">https://www.andreveiga.dev/first-post/</guid><pubDate>Sun, 16 Jan 2022 19:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;This past week I wanted to try out &lt;a href=&quot;https://knative.dev/docs/&quot;&gt;Knative&lt;/a&gt;, a “Kubernetes-based platform to deploy and manage modern serverless workloads”. In essence, what I’m looking forward is a higher level abstration for running applications/microservices without worrying with Kubernetes inherent complexities.&lt;/p&gt;
&lt;p&gt;I’ve been using &lt;a href=&quot;https://k3s.io&quot;&gt;K3s&lt;/a&gt;, a light-weight Kubernetes distribution built by the team behind &lt;a href=&quot;https://rancher.com&quot;&gt;Rancher&lt;/a&gt; for all of my deployments for a while. It’s easy and fast to install, highly scalable and has a minimal footprint, perfect for on-premises and self-managed deployments.&lt;/p&gt;
&lt;p&gt;K3s comes with it’s own network layer, provided by Traefik. However, since Knative needs to takeover the networking layer in order to successfully run applications as Knative Services, Traefik needs to be disabled. It’s possible to install K3s without Traefik by running the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -sfL https://get.k3s.io &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; -s - --disable traefik&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, to install Knative, just follow the &lt;a href=&quot;https://knative.dev/docs/install/serving/install-serving-with-yaml/&quot;&gt;Knative installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, to try out and “smoke test” the installation, I’ve created the following Knative Service definition (which deploys Nginx as a Knative Service)…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# hello.yaml&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; serving.knative.dev/v1
&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Service
&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hello
&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# This is the name of our new &quot;Revision,&quot; it must follow the convention {service-name}-{revision-name}&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hello&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;nginx
    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nginx
          &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;…and applied it with the the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; kubectl apply -f hello.world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then get the application URL by listing the Knative Services (note that you’ll need the Knative CLI, &lt;code class=&quot;language-text&quot;&gt;kn&lt;/code&gt;, installed):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kn &lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; list&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Automation&lt;/h2&gt;
&lt;p&gt;I’ve created a set of &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt; playbooks to deploy K3s, Knative (and a “smoke test” application) on ARM and made them available in &lt;a href=&quot;https://github.com/aveiga/k3s-knative-arm&quot;&gt;this GitHub repo&lt;/a&gt;. Hope it makes your life easier, when testing Knative.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Documentation, Automation and Ansible]]></title><description><![CDATA[I’ve been religiously documenting every step I do when learning something new for a long time. I tend to forget things easily, especially…]]></description><link>https://www.andreveiga.dev/automation/</link><guid isPermaLink="false">https://www.andreveiga.dev/automation/</guid><pubDate>Sun, 16 Jan 2022 19:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’ve been religiously documenting every step I do when learning something new for a long time. I tend to forget things easily, especially when not really practicing them every day, so my personal defense has been to write down anything that might help me when coming back to the topic at hand many months (and sometimes years) later. A bit like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Zettelkasten&quot;&gt;Zetellkasten&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately, I’ve moved from simply taking notes for myself to actually automating whatever it is I’m working on. I’ve found that it makes me actually dig a bit deeper, remember and learn more effectively and be 100% thorough in my documentation.&lt;/p&gt;
&lt;p&gt;Like many, I’ve started with Bash, since it’s readily available and simple. However, I find that Bash codebases tend to grow out of control quite easily, becoming a mess of tangled, unreadable code. Since some months ago, I’ve started to play around with &lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt; and have completely fallen in love with it. It’s easy to begin with and grows with you as you need it to, helps keep the automation well structured and, if you follow the &lt;a href=&quot;https://docs.ansible.com/ansible/2.8/user_guide/playbooks_best_practices.html&quot;&gt;best practices&lt;/a&gt;, will make all your automation scripts immutable by default (mandatory shoutout to &lt;a href=&quot;https://www.jeffgeerling.com&quot;&gt;Jeff Geerling&lt;/a&gt; and &lt;a href=&quot;https://www.ansiblefordevops.com&quot;&gt;it’s book&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/goclfp6a2IQ&quot;&gt;YouTube series&lt;/a&gt; on Ansible, from whom I’ve learned most of what I know).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aveiga/k3s-knative-arm&quot;&gt;Here’s an example&lt;/a&gt; of some of my Ansible playbooks, in this case deploying K3s and Knative on ARM.&lt;/p&gt;</content:encoded></item></channel></rss>